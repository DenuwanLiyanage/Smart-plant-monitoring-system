
TempSensorNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b54  08002b54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b54  08002b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08002bcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002bcc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060ec  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013c4  00000000  00000000  00026185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000628  00000000  00000000  00027550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  00027b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139af  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005898  00000000  00000000  0003ba97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a796  00000000  00000000  0004132f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000abac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b88  00000000  00000000  000abb40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab4 	.word	0x08002ab4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002ab4 	.word	0x08002ab4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <DWT_Delay_Init+0x58>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <DWT_Delay_Init+0x58>)
 8000932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000936:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <DWT_Delay_Init+0x58>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <DWT_Delay_Init+0x58>)
 800093e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000942:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <DWT_Delay_Init+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <DWT_Delay_Init+0x5c>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <DWT_Delay_Init+0x5c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <DWT_Delay_Init+0x5c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <DWT_Delay_Init+0x5c>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000962:	bf00      	nop
     __ASM volatile ("NOP");
 8000964:	bf00      	nop
  __ASM volatile ("NOP");
 8000966:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <DWT_Delay_Init+0x5c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000970:	2300      	movs	r3, #0
 8000972:	e000      	b.n	8000976 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000974:	2301      	movs	r3, #1
  }
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000edf0 	.word	0xe000edf0
 8000984:	e0001000 	.word	0xe0001000

08000988 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <DWT_Delay_us+0x3c>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000996:	f001 f9ef 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 800099a:	4602      	mov	r2, r0
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <DWT_Delay_us+0x40>)
 800099e:	fba3 2302 	umull	r2, r3, r3, r2
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80009ac:	bf00      	nop
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <DWT_Delay_us+0x3c>)
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad2      	subs	r2, r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3f8      	bcc.n	80009ae <DWT_Delay_us+0x26>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	e0001000 	.word	0xe0001000
 80009c8:	431bde83 	.word	0x431bde83

080009cc <set_gpio_output>:
uint8_t check=0;

  UART_HandleTypeDef huart1;
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  void set_gpio_output(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <set_gpio_output+0x28>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <set_gpio_output+0x28>)
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <set_gpio_output+0x28>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <set_gpio_output+0x28>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	4902      	ldr	r1, [pc, #8]	; (80009f4 <set_gpio_output+0x28>)
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <set_gpio_output+0x2c>)
 80009ec:	f000 fc6e 	bl	80012cc <HAL_GPIO_Init>
  }
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000090 	.word	0x20000090
 80009f8:	40010800 	.word	0x40010800

080009fc <set_gpio_input>:

  /*Configure GPIO pin : PA2 */
  void set_gpio_input(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	   GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <set_gpio_input+0x24>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <set_gpio_input+0x24>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <set_gpio_input+0x24>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	4903      	ldr	r1, [pc, #12]	; (8000a20 <set_gpio_input+0x24>)
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <set_gpio_input+0x28>)
 8000a16:	f000 fc59 	bl	80012cc <HAL_GPIO_Init>
  }
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000090 	.word	0x20000090
 8000a24:	40010800 	.word	0x40010800

08000a28 <dht22_start>:


  void dht22_start(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	  set_gpio_output();
 8000a2c:	f7ff ffce 	bl	80009cc <set_gpio_output>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2102      	movs	r1, #2
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <dht22_start+0x34>)
 8000a36:	f000 fdba 	bl	80015ae <HAL_GPIO_WritePin>
	  DWT_Delay_us(500);
 8000a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3e:	f7ff ffa3 	bl	8000988 <DWT_Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2102      	movs	r1, #2
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <dht22_start+0x34>)
 8000a48:	f000 fdb1 	bl	80015ae <HAL_GPIO_WritePin>
	  DWT_Delay_us(30);
 8000a4c:	201e      	movs	r0, #30
 8000a4e:	f7ff ff9b 	bl	8000988 <DWT_Delay_us>

	  set_gpio_input();
 8000a52:	f7ff ffd3 	bl	80009fc <set_gpio_input>

  }
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800

08000a60 <check_respose>:

  void check_respose (void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	  DWT_Delay_us(40);
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f7ff ff8f 	bl	8000988 <DWT_Delay_us>
	  if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))){
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <check_respose+0x48>)
 8000a6e:	f000 fd87 	bl	8001580 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10c      	bne.n	8000a92 <check_respose+0x32>
		  DWT_Delay_us(40);
 8000a78:	2028      	movs	r0, #40	; 0x28
 8000a7a:	f7ff ff85 	bl	8000988 <DWT_Delay_us>
		  if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))) check=1;
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <check_respose+0x48>)
 8000a82:	f000 fd7d 	bl	8001580 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <check_respose+0x32>
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <check_respose+0x4c>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
	  }
	  while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000a92:	bf00      	nop
 8000a94:	2102      	movs	r1, #2
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <check_respose+0x48>)
 8000a98:	f000 fd72 	bl	8001580 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f8      	bne.n	8000a94 <check_respose+0x34>
  }
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	2000008c 	.word	0x2000008c

08000ab0 <read_data>:


  uint8_t read_data(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	  uint8_t i,j;
	  for (j=0;j<8;j++){
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71bb      	strb	r3, [r7, #6]
 8000aba:	e037      	b.n	8000b2c <read_data+0x7c>
		  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000abc:	bf00      	nop
 8000abe:	2102      	movs	r1, #2
 8000ac0:	481e      	ldr	r0, [pc, #120]	; (8000b3c <read_data+0x8c>)
 8000ac2:	f000 fd5d 	bl	8001580 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0f8      	beq.n	8000abe <read_data+0xe>
		  DWT_Delay_us(40);
 8000acc:	2028      	movs	r0, #40	; 0x28
 8000ace:	f7ff ff5b 	bl	8000988 <DWT_Delay_us>
		  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))==0){
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <read_data+0x8c>)
 8000ad6:	f000 fd53 	bl	8001580 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10e      	bne.n	8000afe <read_data+0x4e>
			  i&= ~(1<<(7-j));
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	4013      	ands	r3, r2
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	e00b      	b.n	8000b16 <read_data+0x66>
		  }
		  else i|= (1<<(7-j));
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	f1c3 0307 	rsb	r3, r3, #7
 8000b04:	2201      	movs	r2, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	b25a      	sxtb	r2, r3
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	71fb      	strb	r3, [r7, #7]
		  while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000b16:	bf00      	nop
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <read_data+0x8c>)
 8000b1c:	f000 fd30 	bl	8001580 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f8      	bne.n	8000b18 <read_data+0x68>
	  for (j=0;j<8;j++){
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	71bb      	strb	r3, [r7, #6]
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	d9c4      	bls.n	8000abc <read_data+0xc>
	  }
	  return i;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
  }
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010800 	.word	0x40010800

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fa59 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f89b 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 f8ff 	bl	8000d50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b52:	f000 f8d3 	bl	8000cfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init ();
 8000b56:	f7ff fee7 	bl	8000928 <DWT_Delay_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"HI\n", strlen("HI\n"), 200);
    /* USER CODE END WHILE */
	  dht22_start();
 8000b5a:	f7ff ff65 	bl	8000a28 <dht22_start>
	 // HAL_UART_Transmit(&huart1, (uint8_t*)"HI01\n", strlen("HI01\n"), 200);
	  check_respose();
 8000b5e:	f7ff ff7f 	bl	8000a60 <check_respose>

	  //HAL_UART_Transmit(&huart1, (uint8_t*)"HI02\n", strlen("HI02\n"), 200);
	  Rh_byte1 = read_data();
 8000b62:	f7ff ffa5 	bl	8000ab0 <read_data>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <main+0x11c>)
 8000b6c:	701a      	strb	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"HI03\n", strlen("HI03\n"), 200);
	  Rh_byte2 = read_data();
 8000b6e:	f7ff ff9f 	bl	8000ab0 <read_data>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <main+0x120>)
 8000b78:	701a      	strb	r2, [r3, #0]
	 // HAL_UART_Transmit(&huart1, (uint8_t*)"HI04\n", strlen("HI04\n"), 200);
	  Temp_byte1 = read_data();
 8000b7a:	f7ff ff99 	bl	8000ab0 <read_data>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <main+0x124>)
 8000b84:	701a      	strb	r2, [r3, #0]
	 // HAL_UART_Transmit(&huart1, (uint8_t*)"HI05\n", strlen("HI05\n"), 200);
	  Temp_byte2 = read_data();
 8000b86:	f7ff ff93 	bl	8000ab0 <read_data>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <main+0x128>)
 8000b90:	701a      	strb	r2, [r3, #0]
	 // HAL_UART_Transmit(&huart1, (uint8_t*)"HI06\n", strlen("HI06\n"), 200);
	  //sum = read_data();
	//  HAL_UART_Transmit(&huart1, (uint8_t*)"HI07\n", strlen("HI07\n"), 200);
	  TEMP1 = (Temp_byte1<<8)|Temp_byte2;
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <main+0x124>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <main+0x128>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <main+0x12c>)
 8000ba8:	801a      	strh	r2, [r3, #0]
	 // HAL_UART_Transmit(&huart1, (uint8_t*)"HI08\n", strlen("HI08\n"), 200);
	  RH1 = (Rh_byte1<<8)|Rh_byte2;
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <main+0x11c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <main+0x120>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <main+0x130>)
 8000bc0:	801a      	strh	r2, [r3, #0]

	  TEMP1 = (TEMP1/10.0);
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <main+0x12c>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fc12 	bl	80003f0 <__aeabi_i2d>
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <main+0x134>)
 8000bd2:	f7ff fda1 	bl	8000718 <__aeabi_ddiv>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	460c      	mov	r4, r1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4621      	mov	r1, r4
 8000bde:	f7ff fe83 	bl	80008e8 <__aeabi_d2uiz>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <main+0x12c>)
 8000be8:	801a      	strh	r2, [r3, #0]
	  RH1 = (RH1/10.0);
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <main+0x130>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fbfe 	bl	80003f0 <__aeabi_i2d>
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <main+0x134>)
 8000bfa:	f7ff fd8d 	bl	8000718 <__aeabi_ddiv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460c      	mov	r4, r1
 8000c02:	4618      	mov	r0, r3
 8000c04:	4621      	mov	r1, r4
 8000c06:	f7ff fe6f 	bl	80008e8 <__aeabi_d2uiz>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <main+0x130>)
 8000c10:	801a      	strh	r2, [r3, #0]
	//  HAL_UART_Transmit(&huart1, (uint8_t*)"HI09\n", strlen("HI09\n"), 200);
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Temperature is %d \n", TEMP1), 500); // @suppress("Float formatting support")
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <main+0x12c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4917      	ldr	r1, [pc, #92]	; (8000c78 <main+0x138>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fb37 	bl	8002290 <siprintf>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4639      	mov	r1, r7
 8000c28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <main+0x13c>)
 8000c2e:	f001 f940 	bl	8001eb2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "Humidity is %d \n", RH1), 500); // @suppress("Float formatting support")
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <main+0x130>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4911      	ldr	r1, [pc, #68]	; (8000c80 <main+0x140>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fb27 	bl	8002290 <siprintf>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4639      	mov	r1, r7
 8000c48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <main+0x13c>)
 8000c4e:	f001 f930 	bl	8001eb2 <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8000c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c56:	f000 fa33 	bl	80010c0 <HAL_Delay>
	  dht22_start();
 8000c5a:	e77e      	b.n	8000b5a <main+0x1a>
 8000c5c:	200000ac 	.word	0x200000ac
 8000c60:	200000f9 	.word	0x200000f9
 8000c64:	200000f8 	.word	0x200000f8
 8000c68:	200000fe 	.word	0x200000fe
 8000c6c:	200000fa 	.word	0x200000fa
 8000c70:	200000fc 	.word	0x200000fc
 8000c74:	40240000 	.word	0x40240000
 8000c78:	08002acc 	.word	0x08002acc
 8000c7c:	200000b8 	.word	0x200000b8
 8000c80:	08002ae0 	.word	0x08002ae0

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	; 0x40
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 faf4 	bl	8002280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fc90 	bl	80015e0 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f865 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fefc 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cee:	f000 f851 	bl	8000d94 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3740      	adds	r7, #64	; 0x40
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART1_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f001 f870 	bl	8001e18 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f829 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000b8 	.word	0x200000b8
 8000d4c:	40013800 	.word	0x40013800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d5c:	f043 0320 	orr.w	r3, r3, #32
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_GPIO_Init+0x40>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */


}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_MspInit+0x60>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_MspInit+0x60>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d131      	bne.n	8000e88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_UART_MspInit+0x90>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_UART_MspInit+0x94>)
 8000e6a:	f000 fa2f 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0x94>)
 8000e84:	f000 fa22 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010800 	.word	0x40010800

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <HardFault_Handler+0x4>

08000eae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <BusFault_Handler+0x4>

08000eba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8ce 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x16>
		heap_end = &end;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <_sbrk+0x50>)
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_sbrk+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <_sbrk+0x50>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <_sbrk+0x50>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	466a      	mov	r2, sp
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d907      	bls.n	8000f2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f1a:	f001 f987 	bl	800222c <__errno>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	230c      	movs	r3, #12
 8000f22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e006      	b.n	8000f38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_sbrk+0x50>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <_sbrk+0x50>)
 8000f34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000a0 	.word	0x200000a0
 8000f44:	20000108 	.word	0x20000108

08000f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <SystemInit+0x5c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <SystemInit+0x5c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <SystemInit+0x5c>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4911      	ldr	r1, [pc, #68]	; (8000fa4 <SystemInit+0x5c>)
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <SystemInit+0x60>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <SystemInit+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <SystemInit+0x5c>)
 8000f6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <SystemInit+0x5c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SystemInit+0x5c>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <SystemInit+0x5c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <SystemInit+0x5c>)
 8000f86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SystemInit+0x5c>)
 8000f8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SystemInit+0x64>)
 8000f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	f8ff0000 	.word	0xf8ff0000
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fb0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fb2:	e003      	b.n	8000fbc <LoopCopyDataInit>

08000fb4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fb6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fb8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fba:	3104      	adds	r1, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fc0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fc4:	d3f6      	bcc.n	8000fb4 <CopyDataInit>
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fc8:	e002      	b.n	8000fd0 <LoopFillZerobss>

08000fca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fcc:	f842 3b04 	str.w	r3, [r2], #4

08000fd0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fd4:	d3f9      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd6:	f7ff ffb7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f001 f92d 	bl	8002238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff fdaf 	bl	8000b40 <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r3, =_sidata
 8000fe4:	08002b5c 	.word	0x08002b5c
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fec:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ff0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ff4:	20000108 	.word	0x20000108

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f929 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fec2 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f933 	bl	80012b2 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f909 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000100 	.word	0x20000100

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	20000100 	.word	0x20000100

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_Delay+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff90 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff49 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5e 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e127      	b.n	8001530 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e0:	2201      	movs	r2, #1
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8116 	bne.w	800152a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b12      	cmp	r3, #18
 8001304:	d034      	beq.n	8001370 <HAL_GPIO_Init+0xa4>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d80d      	bhi.n	8001326 <HAL_GPIO_Init+0x5a>
 800130a:	2b02      	cmp	r3, #2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x9a>
 800130e:	2b02      	cmp	r3, #2
 8001310:	d804      	bhi.n	800131c <HAL_GPIO_Init+0x50>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d031      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d01c      	beq.n	8001354 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131a:	e048      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800131c:	2b03      	cmp	r3, #3
 800131e:	d043      	beq.n	80013a8 <HAL_GPIO_Init+0xdc>
 8001320:	2b11      	cmp	r3, #17
 8001322:	d01b      	beq.n	800135c <HAL_GPIO_Init+0x90>
          break;
 8001324:	e043      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001326:	4a89      	ldr	r2, [pc, #548]	; (800154c <HAL_GPIO_Init+0x280>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d026      	beq.n	800137a <HAL_GPIO_Init+0xae>
 800132c:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_GPIO_Init+0x280>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d806      	bhi.n	8001340 <HAL_GPIO_Init+0x74>
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_GPIO_Init+0x284>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d020      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001338:	4a86      	ldr	r2, [pc, #536]	; (8001554 <HAL_GPIO_Init+0x288>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01d      	beq.n	800137a <HAL_GPIO_Init+0xae>
          break;
 800133e:	e036      	b.n	80013ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001340:	4a85      	ldr	r2, [pc, #532]	; (8001558 <HAL_GPIO_Init+0x28c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0xae>
 8001346:	4a85      	ldr	r2, [pc, #532]	; (800155c <HAL_GPIO_Init+0x290>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d016      	beq.n	800137a <HAL_GPIO_Init+0xae>
 800134c:	4a84      	ldr	r2, [pc, #528]	; (8001560 <HAL_GPIO_Init+0x294>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0xae>
          break;
 8001352:	e02c      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e028      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	3304      	adds	r3, #4
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e023      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	3308      	adds	r3, #8
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e01e      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	330c      	adds	r3, #12
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e019      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001382:	2304      	movs	r3, #4
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e012      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001390:	2308      	movs	r3, #8
 8001392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	611a      	str	r2, [r3, #16]
          break;
 800139a:	e008      	b.n	80013ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	615a      	str	r2, [r3, #20]
          break;
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2bff      	cmp	r3, #255	; 0xff
 80013b2:	d801      	bhi.n	80013b8 <HAL_GPIO_Init+0xec>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	e001      	b.n	80013bc <HAL_GPIO_Init+0xf0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3304      	adds	r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d802      	bhi.n	80013ca <HAL_GPIO_Init+0xfe>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x104>
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	3b08      	subs	r3, #8
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	210f      	movs	r1, #15
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	401a      	ands	r2, r3
 80013e2:	6a39      	ldr	r1, [r7, #32]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	431a      	orrs	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8096 	beq.w	800152a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fe:	4b59      	ldr	r3, [pc, #356]	; (8001564 <HAL_GPIO_Init+0x298>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a58      	ldr	r2, [pc, #352]	; (8001564 <HAL_GPIO_Init+0x298>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x298>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001416:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x29c>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x2a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x19e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2a4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x19a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a49      	ldr	r2, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x196>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_GPIO_Init+0x2ac>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x192>
 800145a:	2303      	movs	r3, #3
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 800145e:	2304      	movs	r3, #4
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x1a0>
 800146a:	2300      	movs	r3, #0
 800146c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <HAL_GPIO_Init+0x29c>)
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4938      	ldr	r1, [pc, #224]	; (800157c <HAL_GPIO_Init+0x2b0>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4933      	ldr	r1, [pc, #204]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	492e      	ldr	r1, [pc, #184]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e006      	b.n	80014da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4929      	ldr	r1, [pc, #164]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	4924      	ldr	r1, [pc, #144]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	491f      	ldr	r1, [pc, #124]	; (800157c <HAL_GPIO_Init+0x2b0>)
 80014fe:	4013      	ands	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	491a      	ldr	r1, [pc, #104]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]
 800151a:	e006      	b.n	800152a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x2b0>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	43db      	mvns	r3, r3
 8001524:	4915      	ldr	r1, [pc, #84]	; (800157c <HAL_GPIO_Init+0x2b0>)
 8001526:	4013      	ands	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	f47f aed0 	bne.w	80012e0 <HAL_GPIO_Init+0x14>
  }
}
 8001540:	bf00      	nop
 8001542:	372c      	adds	r7, #44	; 0x2c
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	10210000 	.word	0x10210000
 8001550:	10110000 	.word	0x10110000
 8001554:	10120000 	.word	0x10120000
 8001558:	10310000 	.word	0x10310000
 800155c:	10320000 	.word	0x10320000
 8001560:	10220000 	.word	0x10220000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40011400 	.word	0x40011400
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	787b      	ldrb	r3, [r7, #1]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e26c      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00c      	beq.n	8001626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800160c:	4b8f      	ldr	r3, [pc, #572]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d112      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
 8001618:	4b8c      	ldr	r3, [pc, #560]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b89      	ldr	r3, [pc, #548]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06c      	beq.n	800170c <HAL_RCC_OscConfig+0x12c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d168      	bne.n	800170c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e246      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x76>
 8001648:	4b80      	ldr	r3, [pc, #512]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7f      	ldr	r2, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a77      	ldr	r2, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xbc>
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a71      	ldr	r2, [pc, #452]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 800169c:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a67      	ldr	r2, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fcf6 	bl	80010ac <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fcf2 	bl	80010ac <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1fa      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe4>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fce2 	bl	80010ac <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fcde 	bl	80010ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1e6      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x10c>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1ba      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4939      	ldr	r1, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fc97 	bl	80010ac <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fc93 	bl	80010ac <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e19b      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc76 	bl	80010ac <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff fc72 	bl	80010ac <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e17a      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03a      	beq.n	8001864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fc56 	bl	80010ac <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fc52 	bl	80010ac <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e15a      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 fada 	bl	8001ddc <RCC_Delay>
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fc3c 	bl	80010ac <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001836:	e00f      	b.n	8001858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fc38 	bl	80010ac <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d908      	bls.n	8001858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e140      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	42420000 	.word	0x42420000
 8001854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b9e      	ldr	r3, [pc, #632]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e9      	bne.n	8001838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a6 	beq.w	80019be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b97      	ldr	r3, [pc, #604]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b94      	ldr	r3, [pc, #592]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a93      	ldr	r2, [pc, #588]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b91      	ldr	r3, [pc, #580]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a8a      	ldr	r2, [pc, #552]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fbf9 	bl	80010ac <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff fbf5 	bl	80010ac <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0fd      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x312>
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e02d      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x334>
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a72      	ldr	r2, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	e01c      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x356>
 800191c:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a69      	ldr	r2, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e00b      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001936:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fba9 	bl	80010ac <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff fba5 	bl	80010ac <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0ab      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ee      	beq.n	800195e <HAL_RCC_OscConfig+0x37e>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff fb93 	bl	80010ac <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fb8f 	bl	80010ac <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e095      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8081 	beq.w	8001aca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d061      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d146      	bne.n	8001a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb63 	bl	80010ac <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fb5f 	bl	80010ac <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e067      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d108      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a19      	ldr	r1, [r3, #32]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	430b      	orrs	r3, r1
 8001a36:	4927      	ldr	r1, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb33 	bl	80010ac <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fb2f 	bl	80010ac <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e037      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46a>
 8001a68:	e02f      	b.n	8001aca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb1c 	bl	80010ac <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fb18 	bl	80010ac <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e020      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x498>
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	42420060 	.word	0x42420060

08001ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d0      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4965      	ldr	r1, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e073      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06b      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4936      	ldr	r1, [pc, #216]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fa6c 	bl	80010ac <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fa68 	bl	80010ac <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e053      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d210      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4601      	mov	r1, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	fa21 f303 	lsr.w	r3, r1, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1cc>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9ca 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08002b08 	.word	0x08002b08
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cbc:	1d3c      	adds	r4, r7, #4
 8001cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x46>
 8001cf2:	e02d      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cf6:	623b      	str	r3, [r7, #32]
      break;
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c5b      	lsrs	r3, r3, #17
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d26:	4413      	add	r3, r2
 8001d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	e004      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	623b      	str	r3, [r7, #32]
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d52:	623b      	str	r3, [r7, #32]
      break;
 8001d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc90      	pop	{r4, r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	08002af4 	.word	0x08002af4
 8001d68:	08002b04 	.word	0x08002b04
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff2 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d94:	4601      	mov	r1, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08002b18 	.word	0x08002b18

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0adb      	lsrs	r3, r3, #11
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08002b18 	.word	0x08002b18

08001ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <RCC_Delay+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <RCC_Delay+0x38>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df8:	bf00      	nop
  }
  while (Delay --);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <RCC_Delay+0x1c>
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000000 	.word	0x20000000
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e03f      	b.n	8001eaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe ffe0 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f90b 	bl	8002078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b088      	sub	sp, #32
 8001eb6:	af02      	add	r7, sp, #8
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 8083 	bne.w	8001fda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_UART_Transmit+0x2e>
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e07b      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Transmit+0x40>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e074      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f08:	f7ff f8d0 	bl	80010ac <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f1a:	e042      	b.n	8001fa2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f32:	d122      	bne.n	8001f7a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f850 	bl	8001fe4 <UART_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e046      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	e017      	b.n	8001fa2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	e013      	b.n	8001fa2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f82d 	bl	8001fe4 <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e023      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1b7      	bne.n	8001f1c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f814 	bl	8001fe4 <UART_WaitOnFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e00a      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff4:	e02c      	b.n	8002050 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d028      	beq.n	8002050 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <UART_WaitOnFlagUntilTimeout+0x30>
 8002004:	f7ff f852 	bl	80010ac <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	429a      	cmp	r2, r3
 8002012:	d21d      	bcs.n	8002050 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002022:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e00f      	b.n	8002070 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	429a      	cmp	r2, r3
 800206c:	d0c3      	beq.n	8001ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020b2:	f023 030c 	bic.w	r3, r3, #12
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	430b      	orrs	r3, r1
 80020be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a52      	ldr	r2, [pc, #328]	; (8002224 <UART_SetConfig+0x1ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d14e      	bne.n	800217e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020e0:	f7ff fe68 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 80020e4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <UART_SetConfig+0x1b0>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	0119      	lsls	r1, r3, #4
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009a      	lsls	r2, r3, #2
 8002110:	441a      	add	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fbb2 f2f3 	udiv	r2, r2, r3
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <UART_SetConfig+0x1b0>)
 800211e:	fba3 0302 	umull	r0, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2064      	movs	r0, #100	; 0x64
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <UART_SetConfig+0x1b0>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	4419      	add	r1, r3
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009a      	lsls	r2, r3, #2
 8002148:	441a      	add	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fbb2 f2f3 	udiv	r2, r2, r3
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <UART_SetConfig+0x1b0>)
 8002156:	fba3 0302 	umull	r0, r3, r3, r2
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2064      	movs	r0, #100	; 0x64
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	3332      	adds	r3, #50	; 0x32
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <UART_SetConfig+0x1b0>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	440a      	add	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800217c:	e04d      	b.n	800221a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800217e:	f7ff fe05 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8002182:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <UART_SetConfig+0x1b0>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	0119      	lsls	r1, r3, #4
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009a      	lsls	r2, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <UART_SetConfig+0x1b0>)
 80021bc:	fba3 0302 	umull	r0, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2064      	movs	r0, #100	; 0x64
 80021c4:	fb00 f303 	mul.w	r3, r0, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	3332      	adds	r3, #50	; 0x32
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <UART_SetConfig+0x1b0>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	4419      	add	r1, r3
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009a      	lsls	r2, r3, #2
 80021e6:	441a      	add	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <UART_SetConfig+0x1b0>)
 80021f4:	fba3 0302 	umull	r0, r3, r3, r2
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	fb00 f303 	mul.w	r3, r0, r3
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	3332      	adds	r3, #50	; 0x32
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <UART_SetConfig+0x1b0>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	f003 020f 	and.w	r2, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	440a      	add	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40013800 	.word	0x40013800
 8002228:	51eb851f 	.word	0x51eb851f

0800222c <__errno>:
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <__errno+0x8>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000000c 	.word	0x2000000c

08002238 <__libc_init_array>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	2500      	movs	r5, #0
 800223c:	4e0c      	ldr	r6, [pc, #48]	; (8002270 <__libc_init_array+0x38>)
 800223e:	4c0d      	ldr	r4, [pc, #52]	; (8002274 <__libc_init_array+0x3c>)
 8002240:	1ba4      	subs	r4, r4, r6
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	42a5      	cmp	r5, r4
 8002246:	d109      	bne.n	800225c <__libc_init_array+0x24>
 8002248:	f000 fc34 	bl	8002ab4 <_init>
 800224c:	2500      	movs	r5, #0
 800224e:	4e0a      	ldr	r6, [pc, #40]	; (8002278 <__libc_init_array+0x40>)
 8002250:	4c0a      	ldr	r4, [pc, #40]	; (800227c <__libc_init_array+0x44>)
 8002252:	1ba4      	subs	r4, r4, r6
 8002254:	10a4      	asrs	r4, r4, #2
 8002256:	42a5      	cmp	r5, r4
 8002258:	d105      	bne.n	8002266 <__libc_init_array+0x2e>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002260:	4798      	blx	r3
 8002262:	3501      	adds	r5, #1
 8002264:	e7ee      	b.n	8002244 <__libc_init_array+0xc>
 8002266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800226a:	4798      	blx	r3
 800226c:	3501      	adds	r5, #1
 800226e:	e7f2      	b.n	8002256 <__libc_init_array+0x1e>
 8002270:	08002b54 	.word	0x08002b54
 8002274:	08002b54 	.word	0x08002b54
 8002278:	08002b54 	.word	0x08002b54
 800227c:	08002b58 	.word	0x08002b58

08002280 <memset>:
 8002280:	4603      	mov	r3, r0
 8002282:	4402      	add	r2, r0
 8002284:	4293      	cmp	r3, r2
 8002286:	d100      	bne.n	800228a <memset+0xa>
 8002288:	4770      	bx	lr
 800228a:	f803 1b01 	strb.w	r1, [r3], #1
 800228e:	e7f9      	b.n	8002284 <memset+0x4>

08002290 <siprintf>:
 8002290:	b40e      	push	{r1, r2, r3}
 8002292:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002296:	b500      	push	{lr}
 8002298:	b09c      	sub	sp, #112	; 0x70
 800229a:	ab1d      	add	r3, sp, #116	; 0x74
 800229c:	9002      	str	r0, [sp, #8]
 800229e:	9006      	str	r0, [sp, #24]
 80022a0:	9107      	str	r1, [sp, #28]
 80022a2:	9104      	str	r1, [sp, #16]
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <siprintf+0x38>)
 80022a6:	4909      	ldr	r1, [pc, #36]	; (80022cc <siprintf+0x3c>)
 80022a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80022ac:	9105      	str	r1, [sp, #20]
 80022ae:	6800      	ldr	r0, [r0, #0]
 80022b0:	a902      	add	r1, sp, #8
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f000 f866 	bl	8002384 <_svfiprintf_r>
 80022b8:	2200      	movs	r2, #0
 80022ba:	9b02      	ldr	r3, [sp, #8]
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	b01c      	add	sp, #112	; 0x70
 80022c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80022c4:	b003      	add	sp, #12
 80022c6:	4770      	bx	lr
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	ffff0208 	.word	0xffff0208

080022d0 <__ssputs_r>:
 80022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d4:	688e      	ldr	r6, [r1, #8]
 80022d6:	4682      	mov	sl, r0
 80022d8:	429e      	cmp	r6, r3
 80022da:	460c      	mov	r4, r1
 80022dc:	4690      	mov	r8, r2
 80022de:	4699      	mov	r9, r3
 80022e0:	d837      	bhi.n	8002352 <__ssputs_r+0x82>
 80022e2:	898a      	ldrh	r2, [r1, #12]
 80022e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022e8:	d031      	beq.n	800234e <__ssputs_r+0x7e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	6825      	ldr	r5, [r4, #0]
 80022ee:	6909      	ldr	r1, [r1, #16]
 80022f0:	1a6f      	subs	r7, r5, r1
 80022f2:	6965      	ldr	r5, [r4, #20]
 80022f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80022fc:	f109 0301 	add.w	r3, r9, #1
 8002300:	443b      	add	r3, r7
 8002302:	429d      	cmp	r5, r3
 8002304:	bf38      	it	cc
 8002306:	461d      	movcc	r5, r3
 8002308:	0553      	lsls	r3, r2, #21
 800230a:	d530      	bpl.n	800236e <__ssputs_r+0x9e>
 800230c:	4629      	mov	r1, r5
 800230e:	f000 fb37 	bl	8002980 <_malloc_r>
 8002312:	4606      	mov	r6, r0
 8002314:	b950      	cbnz	r0, 800232c <__ssputs_r+0x5c>
 8002316:	230c      	movs	r3, #12
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f8ca 3000 	str.w	r3, [sl]
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002326:	81a3      	strh	r3, [r4, #12]
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232c:	463a      	mov	r2, r7
 800232e:	6921      	ldr	r1, [r4, #16]
 8002330:	f000 fab6 	bl	80028a0 <memcpy>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800233a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233e:	81a3      	strh	r3, [r4, #12]
 8002340:	6126      	str	r6, [r4, #16]
 8002342:	443e      	add	r6, r7
 8002344:	6026      	str	r6, [r4, #0]
 8002346:	464e      	mov	r6, r9
 8002348:	6165      	str	r5, [r4, #20]
 800234a:	1bed      	subs	r5, r5, r7
 800234c:	60a5      	str	r5, [r4, #8]
 800234e:	454e      	cmp	r6, r9
 8002350:	d900      	bls.n	8002354 <__ssputs_r+0x84>
 8002352:	464e      	mov	r6, r9
 8002354:	4632      	mov	r2, r6
 8002356:	4641      	mov	r1, r8
 8002358:	6820      	ldr	r0, [r4, #0]
 800235a:	f000 faac 	bl	80028b6 <memmove>
 800235e:	68a3      	ldr	r3, [r4, #8]
 8002360:	2000      	movs	r0, #0
 8002362:	1b9b      	subs	r3, r3, r6
 8002364:	60a3      	str	r3, [r4, #8]
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	441e      	add	r6, r3
 800236a:	6026      	str	r6, [r4, #0]
 800236c:	e7dc      	b.n	8002328 <__ssputs_r+0x58>
 800236e:	462a      	mov	r2, r5
 8002370:	f000 fb60 	bl	8002a34 <_realloc_r>
 8002374:	4606      	mov	r6, r0
 8002376:	2800      	cmp	r0, #0
 8002378:	d1e2      	bne.n	8002340 <__ssputs_r+0x70>
 800237a:	6921      	ldr	r1, [r4, #16]
 800237c:	4650      	mov	r0, sl
 800237e:	f000 fab3 	bl	80028e8 <_free_r>
 8002382:	e7c8      	b.n	8002316 <__ssputs_r+0x46>

08002384 <_svfiprintf_r>:
 8002384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002388:	461d      	mov	r5, r3
 800238a:	898b      	ldrh	r3, [r1, #12]
 800238c:	b09d      	sub	sp, #116	; 0x74
 800238e:	061f      	lsls	r7, r3, #24
 8002390:	4680      	mov	r8, r0
 8002392:	460c      	mov	r4, r1
 8002394:	4616      	mov	r6, r2
 8002396:	d50f      	bpl.n	80023b8 <_svfiprintf_r+0x34>
 8002398:	690b      	ldr	r3, [r1, #16]
 800239a:	b96b      	cbnz	r3, 80023b8 <_svfiprintf_r+0x34>
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	f000 faef 	bl	8002980 <_malloc_r>
 80023a2:	6020      	str	r0, [r4, #0]
 80023a4:	6120      	str	r0, [r4, #16]
 80023a6:	b928      	cbnz	r0, 80023b4 <_svfiprintf_r+0x30>
 80023a8:	230c      	movs	r3, #12
 80023aa:	f8c8 3000 	str.w	r3, [r8]
 80023ae:	f04f 30ff 	mov.w	r0, #4294967295
 80023b2:	e0c8      	b.n	8002546 <_svfiprintf_r+0x1c2>
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	6163      	str	r3, [r4, #20]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9309      	str	r3, [sp, #36]	; 0x24
 80023bc:	2320      	movs	r3, #32
 80023be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023c2:	2330      	movs	r3, #48	; 0x30
 80023c4:	f04f 0b01 	mov.w	fp, #1
 80023c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023cc:	9503      	str	r5, [sp, #12]
 80023ce:	4637      	mov	r7, r6
 80023d0:	463d      	mov	r5, r7
 80023d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80023d6:	b10b      	cbz	r3, 80023dc <_svfiprintf_r+0x58>
 80023d8:	2b25      	cmp	r3, #37	; 0x25
 80023da:	d13e      	bne.n	800245a <_svfiprintf_r+0xd6>
 80023dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80023e0:	d00b      	beq.n	80023fa <_svfiprintf_r+0x76>
 80023e2:	4653      	mov	r3, sl
 80023e4:	4632      	mov	r2, r6
 80023e6:	4621      	mov	r1, r4
 80023e8:	4640      	mov	r0, r8
 80023ea:	f7ff ff71 	bl	80022d0 <__ssputs_r>
 80023ee:	3001      	adds	r0, #1
 80023f0:	f000 80a4 	beq.w	800253c <_svfiprintf_r+0x1b8>
 80023f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023f6:	4453      	add	r3, sl
 80023f8:	9309      	str	r3, [sp, #36]	; 0x24
 80023fa:	783b      	ldrb	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 809d 	beq.w	800253c <_svfiprintf_r+0x1b8>
 8002402:	2300      	movs	r3, #0
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800240c:	9304      	str	r3, [sp, #16]
 800240e:	9307      	str	r3, [sp, #28]
 8002410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002414:	931a      	str	r3, [sp, #104]	; 0x68
 8002416:	462f      	mov	r7, r5
 8002418:	2205      	movs	r2, #5
 800241a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800241e:	4850      	ldr	r0, [pc, #320]	; (8002560 <_svfiprintf_r+0x1dc>)
 8002420:	f000 fa30 	bl	8002884 <memchr>
 8002424:	9b04      	ldr	r3, [sp, #16]
 8002426:	b9d0      	cbnz	r0, 800245e <_svfiprintf_r+0xda>
 8002428:	06d9      	lsls	r1, r3, #27
 800242a:	bf44      	itt	mi
 800242c:	2220      	movmi	r2, #32
 800242e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002432:	071a      	lsls	r2, r3, #28
 8002434:	bf44      	itt	mi
 8002436:	222b      	movmi	r2, #43	; 0x2b
 8002438:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800243c:	782a      	ldrb	r2, [r5, #0]
 800243e:	2a2a      	cmp	r2, #42	; 0x2a
 8002440:	d015      	beq.n	800246e <_svfiprintf_r+0xea>
 8002442:	462f      	mov	r7, r5
 8002444:	2000      	movs	r0, #0
 8002446:	250a      	movs	r5, #10
 8002448:	9a07      	ldr	r2, [sp, #28]
 800244a:	4639      	mov	r1, r7
 800244c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002450:	3b30      	subs	r3, #48	; 0x30
 8002452:	2b09      	cmp	r3, #9
 8002454:	d94d      	bls.n	80024f2 <_svfiprintf_r+0x16e>
 8002456:	b1b8      	cbz	r0, 8002488 <_svfiprintf_r+0x104>
 8002458:	e00f      	b.n	800247a <_svfiprintf_r+0xf6>
 800245a:	462f      	mov	r7, r5
 800245c:	e7b8      	b.n	80023d0 <_svfiprintf_r+0x4c>
 800245e:	4a40      	ldr	r2, [pc, #256]	; (8002560 <_svfiprintf_r+0x1dc>)
 8002460:	463d      	mov	r5, r7
 8002462:	1a80      	subs	r0, r0, r2
 8002464:	fa0b f000 	lsl.w	r0, fp, r0
 8002468:	4318      	orrs	r0, r3
 800246a:	9004      	str	r0, [sp, #16]
 800246c:	e7d3      	b.n	8002416 <_svfiprintf_r+0x92>
 800246e:	9a03      	ldr	r2, [sp, #12]
 8002470:	1d11      	adds	r1, r2, #4
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	9103      	str	r1, [sp, #12]
 8002476:	2a00      	cmp	r2, #0
 8002478:	db01      	blt.n	800247e <_svfiprintf_r+0xfa>
 800247a:	9207      	str	r2, [sp, #28]
 800247c:	e004      	b.n	8002488 <_svfiprintf_r+0x104>
 800247e:	4252      	negs	r2, r2
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	9207      	str	r2, [sp, #28]
 8002486:	9304      	str	r3, [sp, #16]
 8002488:	783b      	ldrb	r3, [r7, #0]
 800248a:	2b2e      	cmp	r3, #46	; 0x2e
 800248c:	d10c      	bne.n	80024a8 <_svfiprintf_r+0x124>
 800248e:	787b      	ldrb	r3, [r7, #1]
 8002490:	2b2a      	cmp	r3, #42	; 0x2a
 8002492:	d133      	bne.n	80024fc <_svfiprintf_r+0x178>
 8002494:	9b03      	ldr	r3, [sp, #12]
 8002496:	3702      	adds	r7, #2
 8002498:	1d1a      	adds	r2, r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	9203      	str	r2, [sp, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfb8      	it	lt
 80024a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a6:	9305      	str	r3, [sp, #20]
 80024a8:	4d2e      	ldr	r5, [pc, #184]	; (8002564 <_svfiprintf_r+0x1e0>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	7839      	ldrb	r1, [r7, #0]
 80024ae:	4628      	mov	r0, r5
 80024b0:	f000 f9e8 	bl	8002884 <memchr>
 80024b4:	b138      	cbz	r0, 80024c6 <_svfiprintf_r+0x142>
 80024b6:	2340      	movs	r3, #64	; 0x40
 80024b8:	1b40      	subs	r0, r0, r5
 80024ba:	fa03 f000 	lsl.w	r0, r3, r0
 80024be:	9b04      	ldr	r3, [sp, #16]
 80024c0:	3701      	adds	r7, #1
 80024c2:	4303      	orrs	r3, r0
 80024c4:	9304      	str	r3, [sp, #16]
 80024c6:	7839      	ldrb	r1, [r7, #0]
 80024c8:	2206      	movs	r2, #6
 80024ca:	4827      	ldr	r0, [pc, #156]	; (8002568 <_svfiprintf_r+0x1e4>)
 80024cc:	1c7e      	adds	r6, r7, #1
 80024ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024d2:	f000 f9d7 	bl	8002884 <memchr>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d038      	beq.n	800254c <_svfiprintf_r+0x1c8>
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <_svfiprintf_r+0x1e8>)
 80024dc:	bb13      	cbnz	r3, 8002524 <_svfiprintf_r+0x1a0>
 80024de:	9b03      	ldr	r3, [sp, #12]
 80024e0:	3307      	adds	r3, #7
 80024e2:	f023 0307 	bic.w	r3, r3, #7
 80024e6:	3308      	adds	r3, #8
 80024e8:	9303      	str	r3, [sp, #12]
 80024ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ec:	444b      	add	r3, r9
 80024ee:	9309      	str	r3, [sp, #36]	; 0x24
 80024f0:	e76d      	b.n	80023ce <_svfiprintf_r+0x4a>
 80024f2:	fb05 3202 	mla	r2, r5, r2, r3
 80024f6:	2001      	movs	r0, #1
 80024f8:	460f      	mov	r7, r1
 80024fa:	e7a6      	b.n	800244a <_svfiprintf_r+0xc6>
 80024fc:	2300      	movs	r3, #0
 80024fe:	250a      	movs	r5, #10
 8002500:	4619      	mov	r1, r3
 8002502:	3701      	adds	r7, #1
 8002504:	9305      	str	r3, [sp, #20]
 8002506:	4638      	mov	r0, r7
 8002508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800250c:	3a30      	subs	r2, #48	; 0x30
 800250e:	2a09      	cmp	r2, #9
 8002510:	d903      	bls.n	800251a <_svfiprintf_r+0x196>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0c8      	beq.n	80024a8 <_svfiprintf_r+0x124>
 8002516:	9105      	str	r1, [sp, #20]
 8002518:	e7c6      	b.n	80024a8 <_svfiprintf_r+0x124>
 800251a:	fb05 2101 	mla	r1, r5, r1, r2
 800251e:	2301      	movs	r3, #1
 8002520:	4607      	mov	r7, r0
 8002522:	e7f0      	b.n	8002506 <_svfiprintf_r+0x182>
 8002524:	ab03      	add	r3, sp, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4622      	mov	r2, r4
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <_svfiprintf_r+0x1ec>)
 800252c:	a904      	add	r1, sp, #16
 800252e:	4640      	mov	r0, r8
 8002530:	f3af 8000 	nop.w
 8002534:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002538:	4681      	mov	r9, r0
 800253a:	d1d6      	bne.n	80024ea <_svfiprintf_r+0x166>
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	065b      	lsls	r3, r3, #25
 8002540:	f53f af35 	bmi.w	80023ae <_svfiprintf_r+0x2a>
 8002544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002546:	b01d      	add	sp, #116	; 0x74
 8002548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800254c:	ab03      	add	r3, sp, #12
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4622      	mov	r2, r4
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <_svfiprintf_r+0x1ec>)
 8002554:	a904      	add	r1, sp, #16
 8002556:	4640      	mov	r0, r8
 8002558:	f000 f882 	bl	8002660 <_printf_i>
 800255c:	e7ea      	b.n	8002534 <_svfiprintf_r+0x1b0>
 800255e:	bf00      	nop
 8002560:	08002b20 	.word	0x08002b20
 8002564:	08002b26 	.word	0x08002b26
 8002568:	08002b2a 	.word	0x08002b2a
 800256c:	00000000 	.word	0x00000000
 8002570:	080022d1 	.word	0x080022d1

08002574 <_printf_common>:
 8002574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	4691      	mov	r9, r2
 800257a:	461f      	mov	r7, r3
 800257c:	688a      	ldr	r2, [r1, #8]
 800257e:	690b      	ldr	r3, [r1, #16]
 8002580:	4606      	mov	r6, r0
 8002582:	4293      	cmp	r3, r2
 8002584:	bfb8      	it	lt
 8002586:	4613      	movlt	r3, r2
 8002588:	f8c9 3000 	str.w	r3, [r9]
 800258c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002590:	460c      	mov	r4, r1
 8002592:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002596:	b112      	cbz	r2, 800259e <_printf_common+0x2a>
 8002598:	3301      	adds	r3, #1
 800259a:	f8c9 3000 	str.w	r3, [r9]
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	0699      	lsls	r1, r3, #26
 80025a2:	bf42      	ittt	mi
 80025a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025a8:	3302      	addmi	r3, #2
 80025aa:	f8c9 3000 	strmi.w	r3, [r9]
 80025ae:	6825      	ldr	r5, [r4, #0]
 80025b0:	f015 0506 	ands.w	r5, r5, #6
 80025b4:	d107      	bne.n	80025c6 <_printf_common+0x52>
 80025b6:	f104 0a19 	add.w	sl, r4, #25
 80025ba:	68e3      	ldr	r3, [r4, #12]
 80025bc:	f8d9 2000 	ldr.w	r2, [r9]
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	42ab      	cmp	r3, r5
 80025c4:	dc29      	bgt.n	800261a <_printf_common+0xa6>
 80025c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	3300      	adds	r3, #0
 80025ce:	bf18      	it	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	0692      	lsls	r2, r2, #26
 80025d4:	d42e      	bmi.n	8002634 <_printf_common+0xc0>
 80025d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025da:	4639      	mov	r1, r7
 80025dc:	4630      	mov	r0, r6
 80025de:	47c0      	blx	r8
 80025e0:	3001      	adds	r0, #1
 80025e2:	d021      	beq.n	8002628 <_printf_common+0xb4>
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	68e5      	ldr	r5, [r4, #12]
 80025e8:	f003 0306 	and.w	r3, r3, #6
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	bf18      	it	ne
 80025f0:	2500      	movne	r5, #0
 80025f2:	f8d9 2000 	ldr.w	r2, [r9]
 80025f6:	f04f 0900 	mov.w	r9, #0
 80025fa:	bf08      	it	eq
 80025fc:	1aad      	subeq	r5, r5, r2
 80025fe:	68a3      	ldr	r3, [r4, #8]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	bf08      	it	eq
 8002604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002608:	4293      	cmp	r3, r2
 800260a:	bfc4      	itt	gt
 800260c:	1a9b      	subgt	r3, r3, r2
 800260e:	18ed      	addgt	r5, r5, r3
 8002610:	341a      	adds	r4, #26
 8002612:	454d      	cmp	r5, r9
 8002614:	d11a      	bne.n	800264c <_printf_common+0xd8>
 8002616:	2000      	movs	r0, #0
 8002618:	e008      	b.n	800262c <_printf_common+0xb8>
 800261a:	2301      	movs	r3, #1
 800261c:	4652      	mov	r2, sl
 800261e:	4639      	mov	r1, r7
 8002620:	4630      	mov	r0, r6
 8002622:	47c0      	blx	r8
 8002624:	3001      	adds	r0, #1
 8002626:	d103      	bne.n	8002630 <_printf_common+0xbc>
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002630:	3501      	adds	r5, #1
 8002632:	e7c2      	b.n	80025ba <_printf_common+0x46>
 8002634:	2030      	movs	r0, #48	; 0x30
 8002636:	18e1      	adds	r1, r4, r3
 8002638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002642:	4422      	add	r2, r4
 8002644:	3302      	adds	r3, #2
 8002646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800264a:	e7c4      	b.n	80025d6 <_printf_common+0x62>
 800264c:	2301      	movs	r3, #1
 800264e:	4622      	mov	r2, r4
 8002650:	4639      	mov	r1, r7
 8002652:	4630      	mov	r0, r6
 8002654:	47c0      	blx	r8
 8002656:	3001      	adds	r0, #1
 8002658:	d0e6      	beq.n	8002628 <_printf_common+0xb4>
 800265a:	f109 0901 	add.w	r9, r9, #1
 800265e:	e7d8      	b.n	8002612 <_printf_common+0x9e>

08002660 <_printf_i>:
 8002660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002664:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002668:	460c      	mov	r4, r1
 800266a:	7e09      	ldrb	r1, [r1, #24]
 800266c:	b085      	sub	sp, #20
 800266e:	296e      	cmp	r1, #110	; 0x6e
 8002670:	4617      	mov	r7, r2
 8002672:	4606      	mov	r6, r0
 8002674:	4698      	mov	r8, r3
 8002676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002678:	f000 80b3 	beq.w	80027e2 <_printf_i+0x182>
 800267c:	d822      	bhi.n	80026c4 <_printf_i+0x64>
 800267e:	2963      	cmp	r1, #99	; 0x63
 8002680:	d036      	beq.n	80026f0 <_printf_i+0x90>
 8002682:	d80a      	bhi.n	800269a <_printf_i+0x3a>
 8002684:	2900      	cmp	r1, #0
 8002686:	f000 80b9 	beq.w	80027fc <_printf_i+0x19c>
 800268a:	2958      	cmp	r1, #88	; 0x58
 800268c:	f000 8083 	beq.w	8002796 <_printf_i+0x136>
 8002690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002694:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002698:	e032      	b.n	8002700 <_printf_i+0xa0>
 800269a:	2964      	cmp	r1, #100	; 0x64
 800269c:	d001      	beq.n	80026a2 <_printf_i+0x42>
 800269e:	2969      	cmp	r1, #105	; 0x69
 80026a0:	d1f6      	bne.n	8002690 <_printf_i+0x30>
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	0605      	lsls	r5, r0, #24
 80026a8:	f103 0104 	add.w	r1, r3, #4
 80026ac:	d52a      	bpl.n	8002704 <_printf_i+0xa4>
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da03      	bge.n	80026be <_printf_i+0x5e>
 80026b6:	222d      	movs	r2, #45	; 0x2d
 80026b8:	425b      	negs	r3, r3
 80026ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80026be:	486f      	ldr	r0, [pc, #444]	; (800287c <_printf_i+0x21c>)
 80026c0:	220a      	movs	r2, #10
 80026c2:	e039      	b.n	8002738 <_printf_i+0xd8>
 80026c4:	2973      	cmp	r1, #115	; 0x73
 80026c6:	f000 809d 	beq.w	8002804 <_printf_i+0x1a4>
 80026ca:	d808      	bhi.n	80026de <_printf_i+0x7e>
 80026cc:	296f      	cmp	r1, #111	; 0x6f
 80026ce:	d020      	beq.n	8002712 <_printf_i+0xb2>
 80026d0:	2970      	cmp	r1, #112	; 0x70
 80026d2:	d1dd      	bne.n	8002690 <_printf_i+0x30>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	6023      	str	r3, [r4, #0]
 80026dc:	e003      	b.n	80026e6 <_printf_i+0x86>
 80026de:	2975      	cmp	r1, #117	; 0x75
 80026e0:	d017      	beq.n	8002712 <_printf_i+0xb2>
 80026e2:	2978      	cmp	r1, #120	; 0x78
 80026e4:	d1d4      	bne.n	8002690 <_printf_i+0x30>
 80026e6:	2378      	movs	r3, #120	; 0x78
 80026e8:	4865      	ldr	r0, [pc, #404]	; (8002880 <_printf_i+0x220>)
 80026ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026ee:	e055      	b.n	800279c <_printf_i+0x13c>
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f6:	1d19      	adds	r1, r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6011      	str	r1, [r2, #0]
 80026fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002700:	2301      	movs	r3, #1
 8002702:	e08c      	b.n	800281e <_printf_i+0x1be>
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800270a:	6011      	str	r1, [r2, #0]
 800270c:	bf18      	it	ne
 800270e:	b21b      	sxthne	r3, r3
 8002710:	e7cf      	b.n	80026b2 <_printf_i+0x52>
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	6825      	ldr	r5, [r4, #0]
 8002716:	1d18      	adds	r0, r3, #4
 8002718:	6010      	str	r0, [r2, #0]
 800271a:	0628      	lsls	r0, r5, #24
 800271c:	d501      	bpl.n	8002722 <_printf_i+0xc2>
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e002      	b.n	8002728 <_printf_i+0xc8>
 8002722:	0668      	lsls	r0, r5, #25
 8002724:	d5fb      	bpl.n	800271e <_printf_i+0xbe>
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	296f      	cmp	r1, #111	; 0x6f
 800272a:	bf14      	ite	ne
 800272c:	220a      	movne	r2, #10
 800272e:	2208      	moveq	r2, #8
 8002730:	4852      	ldr	r0, [pc, #328]	; (800287c <_printf_i+0x21c>)
 8002732:	2100      	movs	r1, #0
 8002734:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002738:	6865      	ldr	r5, [r4, #4]
 800273a:	2d00      	cmp	r5, #0
 800273c:	60a5      	str	r5, [r4, #8]
 800273e:	f2c0 8095 	blt.w	800286c <_printf_i+0x20c>
 8002742:	6821      	ldr	r1, [r4, #0]
 8002744:	f021 0104 	bic.w	r1, r1, #4
 8002748:	6021      	str	r1, [r4, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <_printf_i+0x16a>
 800274e:	2d00      	cmp	r5, #0
 8002750:	f040 808e 	bne.w	8002870 <_printf_i+0x210>
 8002754:	4665      	mov	r5, ip
 8002756:	2a08      	cmp	r2, #8
 8002758:	d10b      	bne.n	8002772 <_printf_i+0x112>
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	07db      	lsls	r3, r3, #31
 800275e:	d508      	bpl.n	8002772 <_printf_i+0x112>
 8002760:	6923      	ldr	r3, [r4, #16]
 8002762:	6862      	ldr	r2, [r4, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	bfde      	ittt	le
 8002768:	2330      	movle	r3, #48	; 0x30
 800276a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800276e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002772:	ebac 0305 	sub.w	r3, ip, r5
 8002776:	6123      	str	r3, [r4, #16]
 8002778:	f8cd 8000 	str.w	r8, [sp]
 800277c:	463b      	mov	r3, r7
 800277e:	aa03      	add	r2, sp, #12
 8002780:	4621      	mov	r1, r4
 8002782:	4630      	mov	r0, r6
 8002784:	f7ff fef6 	bl	8002574 <_printf_common>
 8002788:	3001      	adds	r0, #1
 800278a:	d14d      	bne.n	8002828 <_printf_i+0x1c8>
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	b005      	add	sp, #20
 8002792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002796:	4839      	ldr	r0, [pc, #228]	; (800287c <_printf_i+0x21c>)
 8002798:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	6821      	ldr	r1, [r4, #0]
 80027a0:	1d1d      	adds	r5, r3, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6015      	str	r5, [r2, #0]
 80027a6:	060a      	lsls	r2, r1, #24
 80027a8:	d50b      	bpl.n	80027c2 <_printf_i+0x162>
 80027aa:	07ca      	lsls	r2, r1, #31
 80027ac:	bf44      	itt	mi
 80027ae:	f041 0120 	orrmi.w	r1, r1, #32
 80027b2:	6021      	strmi	r1, [r4, #0]
 80027b4:	b91b      	cbnz	r3, 80027be <_printf_i+0x15e>
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	f022 0220 	bic.w	r2, r2, #32
 80027bc:	6022      	str	r2, [r4, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	e7b7      	b.n	8002732 <_printf_i+0xd2>
 80027c2:	064d      	lsls	r5, r1, #25
 80027c4:	bf48      	it	mi
 80027c6:	b29b      	uxthmi	r3, r3
 80027c8:	e7ef      	b.n	80027aa <_printf_i+0x14a>
 80027ca:	4665      	mov	r5, ip
 80027cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80027d0:	fb02 3311 	mls	r3, r2, r1, r3
 80027d4:	5cc3      	ldrb	r3, [r0, r3]
 80027d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80027da:	460b      	mov	r3, r1
 80027dc:	2900      	cmp	r1, #0
 80027de:	d1f5      	bne.n	80027cc <_printf_i+0x16c>
 80027e0:	e7b9      	b.n	8002756 <_printf_i+0xf6>
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	6825      	ldr	r5, [r4, #0]
 80027e6:	1d18      	adds	r0, r3, #4
 80027e8:	6961      	ldr	r1, [r4, #20]
 80027ea:	6010      	str	r0, [r2, #0]
 80027ec:	0628      	lsls	r0, r5, #24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	d501      	bpl.n	80027f6 <_printf_i+0x196>
 80027f2:	6019      	str	r1, [r3, #0]
 80027f4:	e002      	b.n	80027fc <_printf_i+0x19c>
 80027f6:	066a      	lsls	r2, r5, #25
 80027f8:	d5fb      	bpl.n	80027f2 <_printf_i+0x192>
 80027fa:	8019      	strh	r1, [r3, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	4665      	mov	r5, ip
 8002800:	6123      	str	r3, [r4, #16]
 8002802:	e7b9      	b.n	8002778 <_printf_i+0x118>
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	1d19      	adds	r1, r3, #4
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	681d      	ldr	r5, [r3, #0]
 800280c:	6862      	ldr	r2, [r4, #4]
 800280e:	2100      	movs	r1, #0
 8002810:	4628      	mov	r0, r5
 8002812:	f000 f837 	bl	8002884 <memchr>
 8002816:	b108      	cbz	r0, 800281c <_printf_i+0x1bc>
 8002818:	1b40      	subs	r0, r0, r5
 800281a:	6060      	str	r0, [r4, #4]
 800281c:	6863      	ldr	r3, [r4, #4]
 800281e:	6123      	str	r3, [r4, #16]
 8002820:	2300      	movs	r3, #0
 8002822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002826:	e7a7      	b.n	8002778 <_printf_i+0x118>
 8002828:	6923      	ldr	r3, [r4, #16]
 800282a:	462a      	mov	r2, r5
 800282c:	4639      	mov	r1, r7
 800282e:	4630      	mov	r0, r6
 8002830:	47c0      	blx	r8
 8002832:	3001      	adds	r0, #1
 8002834:	d0aa      	beq.n	800278c <_printf_i+0x12c>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	079b      	lsls	r3, r3, #30
 800283a:	d413      	bmi.n	8002864 <_printf_i+0x204>
 800283c:	68e0      	ldr	r0, [r4, #12]
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	4298      	cmp	r0, r3
 8002842:	bfb8      	it	lt
 8002844:	4618      	movlt	r0, r3
 8002846:	e7a3      	b.n	8002790 <_printf_i+0x130>
 8002848:	2301      	movs	r3, #1
 800284a:	464a      	mov	r2, r9
 800284c:	4639      	mov	r1, r7
 800284e:	4630      	mov	r0, r6
 8002850:	47c0      	blx	r8
 8002852:	3001      	adds	r0, #1
 8002854:	d09a      	beq.n	800278c <_printf_i+0x12c>
 8002856:	3501      	adds	r5, #1
 8002858:	68e3      	ldr	r3, [r4, #12]
 800285a:	9a03      	ldr	r2, [sp, #12]
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	42ab      	cmp	r3, r5
 8002860:	dcf2      	bgt.n	8002848 <_printf_i+0x1e8>
 8002862:	e7eb      	b.n	800283c <_printf_i+0x1dc>
 8002864:	2500      	movs	r5, #0
 8002866:	f104 0919 	add.w	r9, r4, #25
 800286a:	e7f5      	b.n	8002858 <_printf_i+0x1f8>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ac      	bne.n	80027ca <_printf_i+0x16a>
 8002870:	7803      	ldrb	r3, [r0, #0]
 8002872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800287a:	e76c      	b.n	8002756 <_printf_i+0xf6>
 800287c:	08002b31 	.word	0x08002b31
 8002880:	08002b42 	.word	0x08002b42

08002884 <memchr>:
 8002884:	b510      	push	{r4, lr}
 8002886:	b2c9      	uxtb	r1, r1
 8002888:	4402      	add	r2, r0
 800288a:	4290      	cmp	r0, r2
 800288c:	4603      	mov	r3, r0
 800288e:	d101      	bne.n	8002894 <memchr+0x10>
 8002890:	2300      	movs	r3, #0
 8002892:	e003      	b.n	800289c <memchr+0x18>
 8002894:	781c      	ldrb	r4, [r3, #0]
 8002896:	3001      	adds	r0, #1
 8002898:	428c      	cmp	r4, r1
 800289a:	d1f6      	bne.n	800288a <memchr+0x6>
 800289c:	4618      	mov	r0, r3
 800289e:	bd10      	pop	{r4, pc}

080028a0 <memcpy>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	1e43      	subs	r3, r0, #1
 80028a4:	440a      	add	r2, r1
 80028a6:	4291      	cmp	r1, r2
 80028a8:	d100      	bne.n	80028ac <memcpy+0xc>
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028b4:	e7f7      	b.n	80028a6 <memcpy+0x6>

080028b6 <memmove>:
 80028b6:	4288      	cmp	r0, r1
 80028b8:	b510      	push	{r4, lr}
 80028ba:	eb01 0302 	add.w	r3, r1, r2
 80028be:	d807      	bhi.n	80028d0 <memmove+0x1a>
 80028c0:	1e42      	subs	r2, r0, #1
 80028c2:	4299      	cmp	r1, r3
 80028c4:	d00a      	beq.n	80028dc <memmove+0x26>
 80028c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80028ce:	e7f8      	b.n	80028c2 <memmove+0xc>
 80028d0:	4283      	cmp	r3, r0
 80028d2:	d9f5      	bls.n	80028c0 <memmove+0xa>
 80028d4:	1881      	adds	r1, r0, r2
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	42d3      	cmn	r3, r2
 80028da:	d100      	bne.n	80028de <memmove+0x28>
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80028e6:	e7f7      	b.n	80028d8 <memmove+0x22>

080028e8 <_free_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4605      	mov	r5, r0
 80028ec:	2900      	cmp	r1, #0
 80028ee:	d043      	beq.n	8002978 <_free_r+0x90>
 80028f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f4:	1f0c      	subs	r4, r1, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfb8      	it	lt
 80028fa:	18e4      	addlt	r4, r4, r3
 80028fc:	f000 f8d0 	bl	8002aa0 <__malloc_lock>
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <_free_r+0x94>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	4610      	mov	r0, r2
 8002906:	b933      	cbnz	r3, 8002916 <_free_r+0x2e>
 8002908:	6063      	str	r3, [r4, #4]
 800290a:	6014      	str	r4, [r2, #0]
 800290c:	4628      	mov	r0, r5
 800290e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002912:	f000 b8c6 	b.w	8002aa2 <__malloc_unlock>
 8002916:	42a3      	cmp	r3, r4
 8002918:	d90b      	bls.n	8002932 <_free_r+0x4a>
 800291a:	6821      	ldr	r1, [r4, #0]
 800291c:	1862      	adds	r2, r4, r1
 800291e:	4293      	cmp	r3, r2
 8002920:	bf01      	itttt	eq
 8002922:	681a      	ldreq	r2, [r3, #0]
 8002924:	685b      	ldreq	r3, [r3, #4]
 8002926:	1852      	addeq	r2, r2, r1
 8002928:	6022      	streq	r2, [r4, #0]
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	6004      	str	r4, [r0, #0]
 800292e:	e7ed      	b.n	800290c <_free_r+0x24>
 8002930:	4613      	mov	r3, r2
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	b10a      	cbz	r2, 800293a <_free_r+0x52>
 8002936:	42a2      	cmp	r2, r4
 8002938:	d9fa      	bls.n	8002930 <_free_r+0x48>
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	1858      	adds	r0, r3, r1
 800293e:	42a0      	cmp	r0, r4
 8002940:	d10b      	bne.n	800295a <_free_r+0x72>
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	4401      	add	r1, r0
 8002946:	1858      	adds	r0, r3, r1
 8002948:	4282      	cmp	r2, r0
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	d1de      	bne.n	800290c <_free_r+0x24>
 800294e:	6810      	ldr	r0, [r2, #0]
 8002950:	6852      	ldr	r2, [r2, #4]
 8002952:	4401      	add	r1, r0
 8002954:	6019      	str	r1, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	e7d8      	b.n	800290c <_free_r+0x24>
 800295a:	d902      	bls.n	8002962 <_free_r+0x7a>
 800295c:	230c      	movs	r3, #12
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	e7d4      	b.n	800290c <_free_r+0x24>
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	1821      	adds	r1, r4, r0
 8002966:	428a      	cmp	r2, r1
 8002968:	bf01      	itttt	eq
 800296a:	6811      	ldreq	r1, [r2, #0]
 800296c:	6852      	ldreq	r2, [r2, #4]
 800296e:	1809      	addeq	r1, r1, r0
 8002970:	6021      	streq	r1, [r4, #0]
 8002972:	6062      	str	r2, [r4, #4]
 8002974:	605c      	str	r4, [r3, #4]
 8002976:	e7c9      	b.n	800290c <_free_r+0x24>
 8002978:	bd38      	pop	{r3, r4, r5, pc}
 800297a:	bf00      	nop
 800297c:	200000a4 	.word	0x200000a4

08002980 <_malloc_r>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	1ccd      	adds	r5, r1, #3
 8002984:	f025 0503 	bic.w	r5, r5, #3
 8002988:	3508      	adds	r5, #8
 800298a:	2d0c      	cmp	r5, #12
 800298c:	bf38      	it	cc
 800298e:	250c      	movcc	r5, #12
 8002990:	2d00      	cmp	r5, #0
 8002992:	4606      	mov	r6, r0
 8002994:	db01      	blt.n	800299a <_malloc_r+0x1a>
 8002996:	42a9      	cmp	r1, r5
 8002998:	d903      	bls.n	80029a2 <_malloc_r+0x22>
 800299a:	230c      	movs	r3, #12
 800299c:	6033      	str	r3, [r6, #0]
 800299e:	2000      	movs	r0, #0
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	f000 f87d 	bl	8002aa0 <__malloc_lock>
 80029a6:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <_malloc_r+0xac>)
 80029a8:	6814      	ldr	r4, [r2, #0]
 80029aa:	4621      	mov	r1, r4
 80029ac:	b991      	cbnz	r1, 80029d4 <_malloc_r+0x54>
 80029ae:	4c20      	ldr	r4, [pc, #128]	; (8002a30 <_malloc_r+0xb0>)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	b91b      	cbnz	r3, 80029bc <_malloc_r+0x3c>
 80029b4:	4630      	mov	r0, r6
 80029b6:	f000 f863 	bl	8002a80 <_sbrk_r>
 80029ba:	6020      	str	r0, [r4, #0]
 80029bc:	4629      	mov	r1, r5
 80029be:	4630      	mov	r0, r6
 80029c0:	f000 f85e 	bl	8002a80 <_sbrk_r>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d124      	bne.n	8002a12 <_malloc_r+0x92>
 80029c8:	230c      	movs	r3, #12
 80029ca:	4630      	mov	r0, r6
 80029cc:	6033      	str	r3, [r6, #0]
 80029ce:	f000 f868 	bl	8002aa2 <__malloc_unlock>
 80029d2:	e7e4      	b.n	800299e <_malloc_r+0x1e>
 80029d4:	680b      	ldr	r3, [r1, #0]
 80029d6:	1b5b      	subs	r3, r3, r5
 80029d8:	d418      	bmi.n	8002a0c <_malloc_r+0x8c>
 80029da:	2b0b      	cmp	r3, #11
 80029dc:	d90f      	bls.n	80029fe <_malloc_r+0x7e>
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	18cc      	adds	r4, r1, r3
 80029e2:	50cd      	str	r5, [r1, r3]
 80029e4:	4630      	mov	r0, r6
 80029e6:	f000 f85c 	bl	8002aa2 <__malloc_unlock>
 80029ea:	f104 000b 	add.w	r0, r4, #11
 80029ee:	1d23      	adds	r3, r4, #4
 80029f0:	f020 0007 	bic.w	r0, r0, #7
 80029f4:	1ac3      	subs	r3, r0, r3
 80029f6:	d0d3      	beq.n	80029a0 <_malloc_r+0x20>
 80029f8:	425a      	negs	r2, r3
 80029fa:	50e2      	str	r2, [r4, r3]
 80029fc:	e7d0      	b.n	80029a0 <_malloc_r+0x20>
 80029fe:	684b      	ldr	r3, [r1, #4]
 8002a00:	428c      	cmp	r4, r1
 8002a02:	bf16      	itet	ne
 8002a04:	6063      	strne	r3, [r4, #4]
 8002a06:	6013      	streq	r3, [r2, #0]
 8002a08:	460c      	movne	r4, r1
 8002a0a:	e7eb      	b.n	80029e4 <_malloc_r+0x64>
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	6849      	ldr	r1, [r1, #4]
 8002a10:	e7cc      	b.n	80029ac <_malloc_r+0x2c>
 8002a12:	1cc4      	adds	r4, r0, #3
 8002a14:	f024 0403 	bic.w	r4, r4, #3
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d005      	beq.n	8002a28 <_malloc_r+0xa8>
 8002a1c:	1a21      	subs	r1, r4, r0
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f000 f82e 	bl	8002a80 <_sbrk_r>
 8002a24:	3001      	adds	r0, #1
 8002a26:	d0cf      	beq.n	80029c8 <_malloc_r+0x48>
 8002a28:	6025      	str	r5, [r4, #0]
 8002a2a:	e7db      	b.n	80029e4 <_malloc_r+0x64>
 8002a2c:	200000a4 	.word	0x200000a4
 8002a30:	200000a8 	.word	0x200000a8

08002a34 <_realloc_r>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	4607      	mov	r7, r0
 8002a38:	4614      	mov	r4, r2
 8002a3a:	460e      	mov	r6, r1
 8002a3c:	b921      	cbnz	r1, 8002a48 <_realloc_r+0x14>
 8002a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a42:	4611      	mov	r1, r2
 8002a44:	f7ff bf9c 	b.w	8002980 <_malloc_r>
 8002a48:	b922      	cbnz	r2, 8002a54 <_realloc_r+0x20>
 8002a4a:	f7ff ff4d 	bl	80028e8 <_free_r>
 8002a4e:	4625      	mov	r5, r4
 8002a50:	4628      	mov	r0, r5
 8002a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a54:	f000 f826 	bl	8002aa4 <_malloc_usable_size_r>
 8002a58:	42a0      	cmp	r0, r4
 8002a5a:	d20f      	bcs.n	8002a7c <_realloc_r+0x48>
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	4638      	mov	r0, r7
 8002a60:	f7ff ff8e 	bl	8002980 <_malloc_r>
 8002a64:	4605      	mov	r5, r0
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d0f2      	beq.n	8002a50 <_realloc_r+0x1c>
 8002a6a:	4631      	mov	r1, r6
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	f7ff ff17 	bl	80028a0 <memcpy>
 8002a72:	4631      	mov	r1, r6
 8002a74:	4638      	mov	r0, r7
 8002a76:	f7ff ff37 	bl	80028e8 <_free_r>
 8002a7a:	e7e9      	b.n	8002a50 <_realloc_r+0x1c>
 8002a7c:	4635      	mov	r5, r6
 8002a7e:	e7e7      	b.n	8002a50 <_realloc_r+0x1c>

08002a80 <_sbrk_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	2300      	movs	r3, #0
 8002a84:	4c05      	ldr	r4, [pc, #20]	; (8002a9c <_sbrk_r+0x1c>)
 8002a86:	4605      	mov	r5, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	f7fe fa30 	bl	8000ef0 <_sbrk>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_sbrk_r+0x1a>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_sbrk_r+0x1a>
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000104 	.word	0x20000104

08002aa0 <__malloc_lock>:
 8002aa0:	4770      	bx	lr

08002aa2 <__malloc_unlock>:
 8002aa2:	4770      	bx	lr

08002aa4 <_malloc_usable_size_r>:
 8002aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aa8:	1f18      	subs	r0, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bfbc      	itt	lt
 8002aae:	580b      	ldrlt	r3, [r1, r0]
 8002ab0:	18c0      	addlt	r0, r0, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
